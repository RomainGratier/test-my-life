{
  "version": "1.0.0",
  "title": "Enterprise Authentication Challenge: Developer Guide",
  "description": "This codefolio serves as a comprehensive guide for the 'Enterprise Authentication Challenge', outlining the requirements, evaluation criteria, and partially implemented features for developers to complete a production-ready authentication system.",
  "created_at": "2025-01-27T00:00:00.000Z",
  "highlights": [
    "Implement enterprise-grade security features for authentication",
    "Apply advanced CSS styling and responsive design principles",
    "Develop robust code architecture for both frontend and backend",
    "Ensure comprehensive functionality, validation, and error handling"
  ],
  "sections": [
    {
      "id": "overview",
      "type": "text",
      "title": "Challenge Overview",
      "content": "You are tasked with implementing a complete authentication system that meets enterprise security standards. This challenge evaluates your skills in Security Implementation (40%), CSS Styling & UI/UX (25%), Code Architecture (20%), and Functionality & Edge Cases (15%)."
    },
    {
      "id": "approach",
      "type": "text",
      "title": "Current Implementation Status & Your Task",
      "content": {
        "text": "**Current Implementation Status & What You Need To Implement:**\n\n**Architectural Refactoring in Progress:** The authentication module is undergoing a refactor to a service-oriented architecture, improving modularity and maintainability.\n\n**Authentication Module Refactoring Plan (Next Steps):**\n1.  **Service Extraction:** Complete the extraction of core authentication, user management, and validation logic into dedicated, testable service modules (e.g., `AuthService`, `UserService`, `ValidationService`).\n2.  **Environment-Based Configuration:** Centralize sensitive credentials, timeouts, and security parameters in environment variables for robust management and security (e.g., JWT expiry, rate limiting settings).\n3.  **Middleware Integration:** Implement reusable Express.js middleware for cross-cutting concerns like token-based authentication and rate limiting, ensuring separation of concerns and reusability.\n\n**What's Already Implemented (as part of refactoring):**\n-   Modular Express.js backend with authentication routes leveraging dedicated services (`AuthService`, `UserService`).\n-   Core authentication logic (JWT generation/verification, bcrypt hashing) encapsulated in `AuthService`.\n-   Basic frontend structure for login/register forms, now includes card layout containers for styling.\n-   CORS configuration, now explicitly managed via environment variables.\n-   Basic error handling.\n\n**What You Still Need to Implement:**\n-   Enterprise password policies (12+ chars, complexity, common password prevention).\n-   Advanced CSS styling (gradient buttons, card layouts, responsive design).\n-   Comprehensive input validation (client & server-side, leveraging `ValidationService`).\n-   Full integration of rate limiting and other security enhancements (leveraging `RateLimitService`).\n-   CSS Grid layout for main application structure.\n-   Custom animations and improved UX.\n-   Production-ready error handling.",
        "format": "markdown"
      }
    },
    {
      "id": "implementation",
      "type": "text",
      "title": "Detailed Requirements",
      "content": {
        "text": "**üîê Security Requirements:**\n\n**Password Policies:**\n- Minimum 12 characters\n- Must contain uppercase letters\n- Must contain lowercase letters\n- Must contain numbers\n- Must contain special characters (!@#$%^&*())\n- Prevent common passwords (password, 123456, etc.)\n- Enforce on both client and server side\n\n**Token Management:**\n- Short-lived access tokens (15-30 minutes recommended)\n- Proper token storage (localStorage or memory)\n- Refresh token strategy awareness (HTTP-only cookies for long-lived tokens)\n- JWT secret from environment variables (never hardcoded)\n\n**Security Features:**\n- Rate limiting: Max 5 login attempts per 5-minute window per IP\n- SQL injection prevention: Use parameterized queries\n- Comprehensive input validation with regex patterns\n- Proper HTTP status codes (400, 401, 403, 404, 409, 500)\n\n**üé® CSS & Styling Requirements:**\n\n**Form Card Layout:**\n- Desktop: Centered vertically and horizontally, max-width 400px\n- Mobile: 95% viewport width, fluid height with auto padding\n\n**Button Styling:**\n- Linear gradient background\n- Subtle box-shadow on hover\n- transform: translateY(-2px) on hover\n\n**Input Fields:**\n- Custom focus ring color (distinct from browser default)\n- 1px solid border that changes color on focus\n\n**Layout & Animations:**\n- CSS Grid for main layout (header, content, footer)\n- Dashboard welcome animation: Fade in and slide up from bottom\n- Responsive design for all screen sizes\n\n**üèõÔ∏è Architecture Requirements:**\n\n**Frontend:**\n- Client-side form validation before server requests\n- Server-side validation as ultimate source of truth\n- CSS Grid for main application layout\n- Modular component structure\n\n**Backend:**\n- Unique username index for performance and integrity\n- TEXT(72) password hash column for bcrypt compatibility\n- Consistent JSON error responses\n- Proper HTTP status codes\n- Environment variable configuration",
        "format": "markdown"
      }
    },
    {
      "id": "results",
      "type": "text",
      "title": "Evaluation Criteria",
      "content": {
        "text": "Your implementation will be evaluated based on the following weighted criteria:\n- **Security Implementation:** 40% of evaluation (e.g., password policies, rate limiting, token management)\n- **CSS Styling & UI/UX:** 25% of evaluation (e.g., responsive design, custom animations, form layout)\n- **Code Architecture:** 20% of evaluation (e.g., modularity, validation, error handling, database design)\n- **Functionality & Edge Cases:** 15% of evaluation (e.g., full feature completion, robust error handling, input validation)",
        "format": "markdown"
      }
    },
    {
      "id": "project-summary",
      "type": "text",
      "title": "Challenge Summary & Scope",
      "content": "This challenge requires the development of a production-ready full-stack authentication system. It encompasses securing user data with advanced password policies, implementing robust token management, safeguarding against common web vulnerabilities like rate limiting and SQL injection, and ensuring a seamless, responsive user experience with modern CSS and animations. The focus is on demonstrating comprehensive skills in secure development practices, clean architecture, and effective UI/UX design within a Node.js Express backend and vanilla JavaScript frontend environment."
    }
  ]
}